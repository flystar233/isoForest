[{"path":"/articles/isoForest.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using isoForest","text":"{isoForest} package simple replication Isolation Forests algorithm outlier detection, {ranger} package used truly construct forests. addition, visualization outliers also implemented help better observe prediction results. ’s isoForest built: Use ranger() function ‘ranger’ package build forest. Key parameter Isolation Forests : sample_size: min(nrow(data), 256L) process constructing decision tree, sampling number 256, effect best.number samples exceed 256, take samples. max_depth: ceiling(log2(sample_size)) min.node.size: 1 Every sample ultimately exists independent node. num.random.splits: 1 Consider splitting based one feature time. splitrule: “extratrees” splitting point feature random. replace: FALSE Perform sampling without replacement. Obtain depth information leaf node root node every tree model. Use original samples prediction obtain predicted leaf node ID sample tree. Retrieve depth predicted value sample tree calculate average depth across entire forest sample. Calculate anomaly score sample using average depth across entire forest.","code":""},{"path":[]},{"path":"/articles/isoForest.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Using isoForest","text":"","code":"library(isoForest) result <- isoForest(iris) head(result$scores) #> # A tibble: 6 × 3 #>      id average_depth anomaly_score #>   <int>         <dbl>         <dbl> #> 1     1          7.91         0.550 #> 2     2          7.81         0.554 #> 3     3          7.79         0.555 #> 4     4          7.67         0.560 #> 5     5          7.87         0.552 #> 6     6          7.45         0.570"},{"path":[]},{"path":"/articles/isoForest.html","id":"heatmap","dir":"Articles","previous_headings":"","what":"heatmap","title":"Using isoForest","text":"","code":"result <- isoForest(iris[1:2]) anomaly_plot(result,iris[1:2],plot_type=\"heatmap\")"},{"path":"/articles/isoForest.html","id":"scatter","dir":"Articles","previous_headings":"","what":"scatter","title":"Using isoForest","text":"","code":"result <- isoForest(iris[1:2]) anomaly_plot(result,iris[1:2],plot_type=\"scatter\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tengfei Xu. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xu T (2024). isoForest: Find Outlier Isolation Forest. R package version 1.0.0, https://github.com/flystar233/isoForest.","code":"@Manual{,   title = {isoForest: Find the Outlier by Isolation Forest},   author = {Tengfei Xu},   year = {2024},   note = {R package version 1.0.0},   url = {https://github.com/flystar233/isoForest}, }"},{"path":"/index.html","id":"isoforest","dir":"","previous_headings":"","what":"Find the Outlier by Isolation Forest","title":"Find the Outlier by Isolation Forest","text":"isoForest package simple replication Isolation Forests algorithm outlier detection, ranger package used truly construct forests. addition, visualization outliers also implemented help better observe prediction results.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Find the Outlier by Isolation Forest","text":"","code":"# Development version devtools::install_github(\"flystar233/isoForest\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Find the Outlier by Isolation Forest","text":"","code":"library(isoForest) result <- isoForest(iris) head(result$scores) #     id average_depth anomaly_score #   <int>         <dbl>         <dbl> #1     1          7.81         0.554 #2     2          7.82         0.554 #3     3          7.71         0.559 #4     4          7.69         0.559 #5     5          7.78         0.556 #6     6          7.39         0.572"},{"path":"/index.html","id":"visualization","dir":"","previous_headings":"","what":"visualization","title":"Find the Outlier by Isolation Forest","text":"","code":"result <- isoForest(iris[1:2]) anomaly_plot(result,iris[1:2],plot_type=\"heatmap\")"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 isoForest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/anomaly_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Anomaly plot — anomaly_plot","title":"Anomaly plot — anomaly_plot","text":"Plots anomaly score heatmap point space.","code":""},{"path":"/reference/anomaly_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anomaly plot — anomaly_plot","text":"","code":"anomaly_plot(   object,   data = NULL,   plot_type = c(\"heatmap\", \"scatter\"),   contamination = 0.05 )"},{"path":"/reference/anomaly_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anomaly plot — anomaly_plot","text":"object fitted isoForest model object data data plotted.","code":""},{"path":"/reference/anomaly_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anomaly plot — anomaly_plot","text":"ggplot object.","code":""},{"path":"/reference/anomaly_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anomaly plot — anomaly_plot","text":"","code":"# Load the data data(\"iris\") # Fit the anomaly detection model model <- isoForest(iris[1:2]) # Plot the anomaly scores anomaly_plot(model, iris[1:2],plot_type=\"scatter\") #> Warning: Use of `data[[1]]` is discouraged. #> ℹ Use `.data[[1]]` instead. #> Warning: Use of `data[[2]]` is discouraged. #> ℹ Use `.data[[2]]` instead.  anomaly_plot(model, iris[1:2],plot_type=\"heatmap\") #> Warning: Use of `space_df[[1]]` is discouraged. #> ℹ Use `.data[[1]]` instead. #> Warning: Use of `space_df[[2]]` is discouraged. #> ℹ Use `.data[[2]]` instead. #> Warning: Use of `space_df[[3]]` is discouraged. #> ℹ Use `.data[[3]]` instead. #> Warning: Use of `data[[1]]` is discouraged. #> ℹ Use `.data[[1]]` instead. #> Warning: Use of `data[[2]]` is discouraged. #> ℹ Use `.data[[2]]` instead."},{"path":"/reference/calculate_depth_per_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the depth from leaf to root per tree. — calculate_depth_per_tree","title":"Calculate the depth from leaf to root per tree. — calculate_depth_per_tree","text":"Depth terminal node single tree ranger model.","code":""},{"path":"/reference/calculate_depth_per_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the depth from leaf to root per tree. — calculate_depth_per_tree","text":"","code":"calculate_depth_per_tree(df)"},{"path":"/reference/calculate_depth_per_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the depth from leaf to root per tree. — calculate_depth_per_tree","text":"df tree info ranger return function 'treeInfo'.","code":""},{"path":"/reference/calculate_depth_per_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the depth from leaf to root per tree. — calculate_depth_per_tree","text":"dataframe two columns: 'nodeID', 'depth'.","code":""},{"path":"/reference/calculate_depth_per_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the depth from leaf to root per tree. — calculate_depth_per_tree","text":"","code":"rf <- ranger::ranger(Species ~ ., data = iris) calculate_depth_per_tree(ranger::treeInfo(rf, 1)) #>   nodeID depth #> 1      1     1 #> 2      8     3 #> 3      9     4 #> 4     10     4 #> 5     12     4 #> 6     13     4 #> 7     14     4 #> 8     15     5 #> 9     16     5"},{"path":"/reference/calculate_leaf_to_root_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the depth from leaf to root. — calculate_leaf_to_root_depth","title":"Calculate the depth from leaf to root. — calculate_leaf_to_root_depth","text":"Depth terminal node trees ranger model returned three column dataframe column names: 'nodeID', 'depth', 'treeID'. Note root node node_id = 0.","code":""},{"path":"/reference/calculate_leaf_to_root_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the depth from leaf to root. — calculate_leaf_to_root_depth","text":"","code":"calculate_leaf_to_root_depth(model)"},{"path":"/reference/calculate_leaf_to_root_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the depth from leaf to root. — calculate_leaf_to_root_depth","text":"model ranger model","code":""},{"path":"/reference/calculate_leaf_to_root_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the depth from leaf to root. — calculate_leaf_to_root_depth","text":"dataframe three columns: 'nodeID', 'depth', 'treeID'.","code":""},{"path":"/reference/calculate_leaf_to_root_depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the depth from leaf to root. — calculate_leaf_to_root_depth","text":"","code":"rf <- ranger::ranger(Species ~ ., data = iris, num.trees = 100) result <- calculate_leaf_to_root_depth(rf) head(result) #>   nodeID depth treeID #> 1      1     1      1 #> 2      3     2      1 #> 3      6     3      1 #> 4      7     4      1 #> 5      8     4      1 #> 6      1     1      2"},{"path":"/reference/computeAnomaly.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the anomaly score — computeAnomaly","title":"Calculate the anomaly score — computeAnomaly","text":"Calculate anomaly score","code":""},{"path":"/reference/computeAnomaly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the anomaly score — computeAnomaly","text":"","code":"computeAnomaly(average_depth, sample_size)"},{"path":"/reference/computeAnomaly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the anomaly score — computeAnomaly","text":"average_depth average depth terminal nodes sample_size number sample size","code":""},{"path":"/reference/computeAnomaly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the anomaly score — computeAnomaly","text":"anomaly score","code":""},{"path":"/reference/computeAnomaly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the anomaly score — computeAnomaly","text":"","code":"if (FALSE) { # \\dontrun{ computeAnomaly(10, 256) } # }"},{"path":"/reference/harmonic_approx.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the harmonic approximation — harmonic_approx","title":"Calculate the harmonic approximation — harmonic_approx","text":"Calculate harmonic approximation","code":""},{"path":"/reference/harmonic_approx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the harmonic approximation — harmonic_approx","text":"","code":"harmonic_approx(n)"},{"path":"/reference/harmonic_approx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the harmonic approximation — harmonic_approx","text":"n number sample size","code":""},{"path":"/reference/harmonic_approx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the harmonic approximation — harmonic_approx","text":"harmonic approximation","code":""},{"path":"/reference/harmonic_approx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the harmonic approximation — harmonic_approx","text":"","code":"harmonic_approx(100) #> [1] 5.182386"},{"path":"/reference/isoForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolation Forest — isoForest","title":"Isolation Forest — isoForest","text":"function implements Isolation Forest algorithm anomaly detection 'ranger'.","code":""},{"path":"/reference/isoForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isolation Forest — isoForest","text":"","code":"isoForest(   data,   num_trees = 500,   sample_size = min(nrow(data), 256L),   max_depth = ceiling(log2(sample_size)),   mtry = NULL,   num.threads = NULL,   seed = NULL,   ... )"},{"path":"/reference/isoForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isolation Forest — isoForest","text":"data data frame matrix containing data analyzed. num_trees number trees grown forest. Default 500. sample_size size sample used tree. Default minimum number rows data 256. max_depth maximum depth tree. Default ceiling logarithm base 2 sample size. mtry number variables consider splitting node. Default NULL, means number variables set square root number variables data. num.threads number threads use parallel processing. Default NULL, means available threads used. seed seed random number generation. Default NULL, means current time used seed. ... Additional arguments passed ranger function.","code":""},{"path":"/reference/isoForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isolation Forest — isoForest","text":"list containing anomaly scores data point. anomaly scores calculated average path length data point root tree.","code":""},{"path":"/reference/isoForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isolation Forest — isoForest","text":"","code":"# Load the required libraries library(ranger) library(isoForest) # Load the data data <- iris # Train and predict the Isolation Forest model by 'ranger'. result <- isoForest(data)"},{"path":"/reference/pathLengthNormalizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the normalization factor — pathLengthNormalizer","title":"Calculate the normalization factor — pathLengthNormalizer","text":"Calculate normalization factor","code":""},{"path":"/reference/pathLengthNormalizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the normalization factor — pathLengthNormalizer","text":"","code":"pathLengthNormalizer(sample_size)"},{"path":"/reference/pathLengthNormalizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the normalization factor — pathLengthNormalizer","text":"sample_size number sample size","code":""},{"path":"/reference/pathLengthNormalizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the normalization factor — pathLengthNormalizer","text":"normalization factor","code":""},{"path":"/reference/pathLengthNormalizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the normalization factor — pathLengthNormalizer","text":"","code":"if (FALSE) { # \\dontrun{ pathLengthNormalizer(100) } # }"},{"path":"/reference/predict.isoForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict anomaly scores using an Isolation Forest model — predict.isoForest","title":"Predict anomaly scores using an Isolation Forest model — predict.isoForest","text":"Predict anomaly scores using Isolation Forest model","code":""},{"path":"/reference/predict.isoForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict anomaly scores using an Isolation Forest model — predict.isoForest","text":"","code":"# S3 method for class 'isoForest' predict(   object,   newdata,   num.threads = NULL,   type = \"terminalNodes\",   seed = NULL,   ... )"},{"path":"/reference/predict.isoForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict anomaly scores using an Isolation Forest model — predict.isoForest","text":"object Isolation Forest model newdata data frame containing new observations predicted num.threads number threads used prediction (default NULL, means available threads) type type prediction made (default \"terminalNodes\") seed seed used random number generator (default NULL) ... additional arguments passed predict function","code":""},{"path":"/reference/predict.isoForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict anomaly scores using an Isolation Forest model — predict.isoForest","text":"data frame containing anomaly scores new observations","code":""},{"path":"/reference/predict.isoForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict anomaly scores using an Isolation Forest model — predict.isoForest","text":"","code":"# Load the example data data(iris) # Train an Isolation Forest model model <- isoForest(iris[1:2]) # Predict anomaly scores for new observations predictions <- predict(model, iris[1:2])"},{"path":"/news/index.html","id":"isoforest-100","dir":"Changelog","previous_headings":"","what":"isoForest 1.0.0","title":"isoForest 1.0.0","text":"Initial CRAN submission.","code":""}]
